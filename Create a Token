// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract MyToken {

    // Public variables to store the details about the coin
    string public n; // Token Name
    string public s; // Token Abbreviation
    uint256 public t; // Total Supply

    // Mapping of addresses to balances
    mapping(address => uint256) public balances;

    // Constructor to initialize the token name, symbol, and initial supply
    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {
        n = _name;
        s = _symbol;
        t = _initialSupply;
        balances[msg.sender] = _initialSupply; // Assign the entire initial supply to the contract deployer
    }

    // Mint function to increase the total supply and balance of the specified address
    function mint(address _to, uint256 _value) public {
        t += _value;
        balances[_to] += _value;
    }

    // Burn function to decrease the total supply and balance of the specified address
    function burn(address _from, uint256 _value) public {
        require(balances[_from] >= _value, "Insufficient balance to burn");
        t -= _value;
        balances[_from] -= _value;
    }
    
    // Function to check the balance of a specific address
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }
}
